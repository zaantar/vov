#!/usr/bin/env bash

#
# Variable VVV - A VVV Site Setup Script
# By Brad Parbs <brad@bradparbs.com>
# Originally by Alison Barrett <alison@barre.tt>
#
# Version 1.7.2
#
# Varying Vagrant Vagrants (https://github.com/Varying-Vagrant-Vagrants/VVV).
#
#	 ██    ██ ██    ██
#	░██   ░██░██   ░██ 	  ▓▓▓▓▓▓▓▓▓▓
#	░░██ ░██ ░░██ ░██ 	 ░▓ author ▓ Brad Parbs <brad@bradparbs.com>
#	 ░░████   ░░████         ░▓ github ▓ http://github.com/bradp/vv
#	  ░░██     ░░██          ░▓▓▓▓▓▓▓▓▓▓
#	   ░░       ░░   	  ░░░░░░░░░░
#
# This script automates the creation & deletion of new WordPress sites using
# Varying Vagrant Vagrants (https://github.com/Varying-Vagrant-Vagrants/VVV).
#
# Copyright (C) 2015 Brad Parbs
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.1.6.0
#
version_number=1.7.2

if [[ ! -z $(which tput) ]]; then
	normal=$(tput sgr0)
	bold=$(tput bold)
	red=$(tput setaf 1)
	green=$(tput setaf 2)
	yellow=$(tput setaf 3)
	blue=$(tput setaf 6)
	magenta=$(tput setaf 5)
	cyan=$(tput setaf 6)
fi


about() {
	cat <<ABOUT
	${magenta}
	 ██    ██ ██    ██
	░██   ░██░██   ░██ 	 ▓▓▓▓▓▓▓▓▓▓
	░░██ ░██ ░░██ ░██  	░▓ author ▓  Brad Parbs <brad@bradparbs.com>
	 ░░████   ░░████  	░▓ github ▓  http://github.com/bradp/vv
	  ░░██     ░░██  	░▓▓▓▓▓▓▓▓▓▓
	   ░░       ░░  	░░░░░░░░░░
${normal}
ABOUT
}


# Usage: show_help [exit_code]
# Example: show_help 254
show_help () {
    cat <<HELP

${bold} USAGE: ${normal}
    vv [--help|-h] [--version] [--about] [--path|-p <path>] [--force-path|-fp] <command> [<site-options>] ...

${bold} OPTIONS: ${normal}
    --help, -h 			Show this help and usage
    --version 			Show current vv version
    --about 			Show project info
    --path, -p 			Path to VVV installation
    --force-path, -fp 		Override vv auto-VVV locating
    --force-sites-folder, -fsf 	Override sites folder directory locating
    --use_defaults		Accept all default options and skip the wizard

${bold} COMMANDS: ${normal}

    list 			List all VVV sites
    create 			Create a new site
    remove 			Remove a site
    vagrant, v 			Pass vagrant command through to VVV
    deployment-create		Create a deployment
    deployment-remove 		Remove a deployment
    deployment-config 		Manually configure deployment
    blueprint-init 		Initialize blueprint file

${bold} SITE OPTIONS: ${normal}
    --domain, -d 		Domain of new site
    --live-url, -u 		Live URL of site
    --files, -f 		Do not provision Vagrant, just create the site directory and files
    --images, -i 		Load images by proxy from the live site
    --name, -n 			Desired name for the site directory (e.g. mysite)
    --web-root, -wr 		Subdirectory used for web server root
    --wp-version, -wv 		Version of WordPress to install
    --debug, -x 		Turn on WP_DEBUG and WP_DEBUG_LOG
    --multisite, -m 		Install as a multisite
    --sample-content, -sc 	Add sample content to site
    --username  		Admin username
    --password  		Admin password
    --email  			Admin email
    --git-repo, -gr  		Git repo to clone as wp-content
    --blueprint, -b 		Name of blueprint to use
    --blank			Creates blank VVV site, with no WordPress
    --blank-with-db		Adds a blank VVV site, with a database
    --wpskeleton, --skel 	Creates a new site with the structure of WP Skeleton
    --database, -db 		Import a local database file
    --remove-defaults, -rd 	Remove default themes and plugins

${bold} EXAMPLE:${normal}
    vv create --domain mysite.dev --name mysite --debug
    vv create -d mysite.dev -n mysite -x

HELP
}


version () {
	echo "vv version $version_number"
}

# Usage: info "message"
# Example: info "doing thing"
# Output (to STDOUT): doing thing
info () {
    printf "%b" "${bold}${yellow}$1${normal} \n"
}

# Usage: success "message"
# Example: success "It's Working"
# Output (to STDOUT): [...] It's Working
success () {
    printf "%b" "[${green}Success${normal}]${green} $1 ${normal}\n"
}

# Usage: warning "message"
# Example: warning "some warning"
# Output (to STDOUT): [...] some warning
warning () {
    printf "%b" "${red} $1 ${normal}\n"
}

# Usage: prompt "question"
# Example: prompt "Site name"
# Output (to STDOUT): Site Name:
prompt () {
    printf "%b" "${magenta} $1: ${normal}"
}

# Usage: error ["message"]
# Example: error "this is an error"
# Output (to STDERR): [ERROR] this is an error
error () {
    printf "%b" "[${bold}${red}Error${normal}]${bold}${red} ${1:-'Unkown Error'}${normal}\n" >&2
}

# Usage: fail "message"
# Example: fail "Unknown Option" 254
fail () {
    error "$1"
    exit 1
}

check_for_update () {
	if [[ ! -z $(which curl) ]]; then
		github_version=$(curl -s https://api.github.com/repos/bradp/vv/tags | grep "\"name\": \"" | head -n 1 | sed 's/"name": "//' | sed 's/",//' | sed 's/ //g' )
		if [[ ! "$version_number" = "$github_version" ]]; then
			info "Your version of vv does not match the current Github version. Please update with vv --update"
		fi
	fi
}

check_how_installed () {
	if [[ ! -z $(which brew) ]]; then
		brew_install_location=$(brew --prefix)
		if [[ -f $brew_install_location"/bin/vv" ]]; then
			installed_with_brew="true"
		else
			installed_with_brew="false"
		fi
	fi
}

install_update () {
	check_how_installed
	update_vv
}

update_vv () {
	if [[ $installed_with_brew = "true" ]]; then
		info "Updating vv via Brew..."
		brew cleanup
		brew reinstall vv
	else
		info "Updating vv..."
		vv_bootstrap_update
	fi
}

vv_bootstrap_update () {
	github_version=$(curl -s https://api.github.com/repos/bradp/vv/tags | grep "\"name\": \"" | head -n 1 | sed 's/"name": "//' | sed 's/",//' | sed 's/ //g' )
	download_link=https://github.com/bradp/vv/archive/"$github_version".tar.gz
	vv_install_location=$(which vv)
	curl -L -o ~/"$github_version".tar.gz "$download_link" 2>/dev/null
	tar -C ~/ -zxvf ~/"$github_version".tar.gz 2>/dev/null
	rm ~/"$github_version".tar.gz
	echo "$(cat ~/vv-"$github_version"/vv)" > "$vv_install_location"
	rm -rf ~/vv-"$github_version"
	success "vv has been updated to the latest version. Thanks!"
}

auto_update_main () {

	if [[ ! $auto_update_disable = "true" ]]; then
		if [ ! -f ~/.vv-update ]; then
			_update_vv_update
		else
			source ~/.vv-update

			epoch_diff=$(($(_current_epoch) - $DAYS_SINCE_UPDATE_CHECK))
			epoch_target=7
			if [[ $epoch_diff -gt $epoch_target ]]; then
				info "vv is out of date. Checking for update."
				github_version=$(curl -s https://api.github.com/repos/bradp/vv/tags | grep "\"name\": \"" | head -n 1 | sed 's/"name": "//' | sed 's/",//' | sed 's/ //g' )
				if [[ ! "$version_number" = "$github_version" ]]; then
					update_vv
				fi

				rm ~/.vv-update
				_update_vv_update
			fi
		fi
	fi
}

_current_epoch() {
  seconds=$(date +%s)
  echo $((seconds/60/60/24))
}

_update_vv_update() {
	touch ~/.vv-update
	echo "DAYS_SINCE_UPDATE_CHECK=$(_current_epoch)" > ~/.vv-update
}

# https://gist.github.com/davejamesmiller/1965569
# Usage: ask "Yes or No?" [default option]
# Example: if "Yes or No?" Y; then
ask () {
    while true; do

        if [ "${2:-}" = "Y" ]; then
            prompt_tail="Y/n"
            default=Y
        elif [ "${2:-}" = "N" ]; then
            prompt_tail="y/N"
            default=N
        else
            prompt_tail="y/n"
            default=
        fi

        # Ask the question
        prompt "$1 [$prompt_tail]"
        read -r REPLY

        # Default?
        if [ -z "$REPLY" ]; then
            REPLY=$default
        fi

        # Check if the reply is valid
        case "$REPLY" in
            Y*|y*) return 0 ;;
            N*|n*) return 1 ;;
        esac

    done
}

argument_expected() {
    if [ -z "$2" ] || [[ "$2" == -* ]]; then
        fail "$1 expected an argument"
    fi
}

check_for_config_file() {
	test -f ~/.vv-config && got_config="true"

	if [ ! -z $got_config ]; then
		load_config_values
	else
		if [[ ! $showing_help = "true" ]]; then
			info "	"
			info "Looks like it's your first time running ${magenta}vv${normal}. "
			info "${magenta}vv${normal} couldn't find a config file, so we will create one now."
			info "This step only needs to be done once."
			info "	"
			get_vvv_path
			create_config_file
		fi
	fi
}

create_config_file() {
{
	echo "{"
	echo "	\"path\": \"$path\""
	echo "}"
} >> ~/.vv-config
info "$HOME/.vv-config was created."
info "	"

}

getJsonVal () {
    python -c "import json,sys;sys.stdout.write(json.dumps(json.load(sys.stdin)$1))";
}

load_config_values() {
	#Load path from config file
	path="$( getJsonVal "['path']" < ~/.vv-config )"
	path="$(echo "$path" | sed -e 's/^"//'  -e 's/"$//')"
}

load_config_autopdate_config_values() {
	#Load path from config file
	auto_update_disable_config="$( getJsonVal "['auto_update_disable']" < ~/.vv-config )"
	auto_update_disable_config="$(echo "$auto_update_disable_config" | sed -e 's/^"//'  -e 's/"$//')"
	if [[ $auto_update_disable_config = "true" ]]; then
		auto_update_disable="true"
	fi
}

load_default_values() {
	defaults="$( getJsonVal "['defaults']" < ~/.vv-config )"
	defaults="$(echo "$defaults" | sed -e 's/^"//'  -e 's/"$//')"
}

get_vvv_path(){
	if [ ! -z "$force_path" ]; then
		unset path
	fi

	if [ ! -z "$path" ]; then
		if [ ! -e "$(eval echo "${path//>}")/Vagrantfile" ]; then
			error "Path specified is not a VVV root directory. Where is VVV installed?"
			unset path

			while [ -z "$path" ]; do
				read -r -e -p "VVV install directory: " path

				# Make sure directory is actually a VVV root
				if [ ! -e "$(eval echo "${path//>}")/Vagrantfile" ]; then
					error "Path specified is not a VVV root directory. Where is VVV installed?"
					unset path
				fi
				path=$(eval echo "${path//>}")
			done

		else
			path=$path
			path=$(eval echo "${path//>}")
		fi


	else
		current_dir=$(pwd)
		if [ -e "$current_dir/Vagrantfile" ]; then
			path=$(pwd)
		elif [ -e ~/Sites/Vagrantfile ] && [ -z "$force_path" ]; then
			path=~/Sites
		elif [ -e ~/Sites/Vagrant/Vagrantfile ] && [ -z "$force_path" ]; then
			path=~/Sites/Vagrant
		elif [ -e ~/vagrant/Vagrantfile ] && [ -z "$force_path" ]; then
			path=~/vagrant
		elif [ -e ~/vagrant-local/Vagrantfile ] && [ -z "$force_path" ]; then
			path=~/vagrant-local
		elif [ -e ~/projects/vvv/Vagrantfile ] && [ -z "$force_path" ]; then
			path=~/projects/vvv
		elif [ -e ~/working/vvv/Vagrantfile ] && [ -z "$force_path" ]; then
			path=~/working/vvv
		elif [ -e ~/vvv/Vagrantfile ] && [ -z "$force_path" ]; then
			path=~/vvv
		else
			while [ -z "$path" ]; do
				read -r -e -p "VVV install directory: " path

				# Make sure directory is actually a VVV root
				if [ ! -e "$(eval echo "${path//>}")/Vagrantfile" ]; then
					error "Path specified is not a VVV root directory. Where is VVV installed?"
					unset path
				fi
				path=$(eval echo "${path//>}")
			done
		fi
	fi
	path=${path%/}
}

get_list_sites() {
	clean_saved=$clean
	clean="true"
	list_sites
	clean=$clean_saved
}

list_sites() {
	cd "$path"/"$sites_folder"
	find . -maxdepth 2 -mindepth 1 -type d -print0 | while IFS= read -r -d '' filename; do
		filename=${filename:2}
		if [[ $filename != 'default' && $filename != 'phpcs' && $filename != 'wp-cli' ]]; then
			if [[ $filename = 'wordpress-default' || $filename = 'wordpress-develop' || $filename = 'wordpress-trunk' ]]; then
				if [[ $filename = 'wordpress-default' ]]; then
					url=local.wordpress.dev
				elif [[ $filename = 'wordpress-develop' ]]; then
					url=src.wordpress-develop.dev
				elif [[ $filename = 'wordpress-trunk' ]]; then
					url=local.wordpress-trunk.dev
				fi

				if [[ ! $clean = "true" ]]; then
					printf "	* %-30s %s %s\n" "${green}$filename${normal}" "${yellow}( $url )${normal}" "${cyan}[VVV default]${normal}"
				fi
			else
				if [[ -f "$path"/"$sites_folder"/"$filename"/vvv-hosts ]]; then
					url=$(<"$path"/"$sites_folder"/"$filename"/vvv-hosts)
					url=$(echo "$url" | sed -e 's/#.*$//' -e '/^$/d')
					urls=$(echo "$url" | wc -l)
					if (( "$urls" > 1 )); then
						url="$(echo "$url" | paste -d ' ' - -)"
					fi
					if [[ ! $clean = "true" ]]; then
						printf "	* %-30s %s\n" "${green}$filename${normal}" "${yellow}( $url )${normal}"

					fi
				fi
			fi
		fi
	done
	exit
}

site_creation_questions() {
	files_only_text=''
	if [[ "$files_only" = "true" ]]; then
		files_only_text=" (file creation only)"
	fi
	info "New VVV Site Setup$files_only_text"

	# Prompt user for vars
	# =============================================================================

	# Get site dir name if not supplied as argument
	if [ ! -z "$site" ]; then
		if [ -f "$path/config/nginx-config/sites/$site.conf" ]; then
			error "Site $site already exists. Remove config/nginx-config/sites/$site.conf to run setup again."
			unset site
		elif [ -d "$path/"$sites_folder"/$site" ]; then
			warning "Directory $path/"$sites_folder"/$site already exists. Existing VVV configuration files will be overwritten."
		fi
	fi
	while [ -z "$site" ]; do
		prompt "Name of new site directory"
		read -r site

		if [ -z "$site" ]; then
			error "You must enter a directory name."
		elif [ -f "$path/config/nginx-config/sites/$site.conf" ]; then
			error "Site $site already exists. Remove config/nginx-config/sites/$site.conf to run setup again."
			unset site
		elif [ -d "$path/"$sites_folder"/$site" ]; then
			warning "Directory $path/"$sites_folder"/$site already exists. Existing VVV configuration files will be overwritten."
		fi
	done

	# Get database name
	db_name=$site

	# Get web root of site
	if [ -z "$web_root" ]; then
		web_root="htdocs"
	fi

	if [ "$no_wp" = "false" ]; then
		if [[ -f "$path"/vv-blueprints.json ]]; then
			# Get local URL
			if [ "$use_defaults" = "false" ]; then
				if [ -z "$blueprint" ]; then
					prompt "Blueprint to use (leave blank for none)"
					read -r blueprint
					if [ -z "$blueprint" ]; then
						unset blueprint
					fi
				fi
			fi
		fi
	fi

	# Get local URL
	while [ -z "$domain" ]; do
		if [ "$use_defaults" = "false" ]; then
			prompt "Domain to use (leave blank for $site.dev)"
			read -r domain
		fi
		if [ -z "$domain" ]; then
			domain="$site.dev"
		fi
	done

	if [ "$no_wp" = "false" ]; then
		if [ ! -z "$version" ]; then
			# Attempt to verify the existence of the version (hacky)
			if curl -s http://codex.wordpress.org/Version_"$version" | grep 'currently no text' > /dev/null; then
				error "Version $version not found, try again"
				unset version
			else
				installversion=" --version=$version"
			fi
		fi

		while [[ -z "$version" ]]; do
			# Get WordPress version
			if [ "$use_defaults" = "false" ]; then
				prompt "WordPress version to install (leave blank for latest version)"
				read -r version
			fi
			if [ -z "$version" ]; then
				installversion=""
				version="(release version)"
			else
				# Attempt to verify the existence of the version (hacky)
				if curl -s http://codex.wordpress.org/Version_"$version" | grep 'currently no text' > /dev/null; then
					error "Version \"$version\" not found, try again"
					unset version
				else
					installversion=" --version=$version"
				fi
			fi
		done

		if [ -z "$multisite" ]; then
			if [ "$use_defaults" = "false" ]; then
				prompt "Install as multisite? (y/N)"
				read -r multisite
			fi
			if [[ $multisite = 'y' ]]; then
				install_text='multisite-install'
			else
				install_text='install'
			fi
		fi

		if [[ $multisite = "y" ]]; then
			while [[ -z $ms_type ]]; do
				if [ "$use_defaults" = "false" ]; then
					prompt "Install as subdomain or subdirectory? "
					read -r ms_type
				fi
				if [[ $ms_type != 'subdomain' && $ms_type != 'subdirectory' ]]; then
					error "Type must be subdomain or subdirectory."
					unset ms_type
				fi
			done
		fi

		if [[ $ms_type = 'subdomain' ]]; then
			install_text='multisite-install --subdomains'
		fi

		if [[ ! -z $git_repo && -d "$path/"$sites_folder"/$site" ]]; then
			error "$path/"$sites_folder"/$site already exists. Skipping git clone."
			unset git_repo
		elif [[ -z "$git_repo" && ! -d "$path/"$sites_folder"/$site" ]]; then
			if [ "$use_defaults" = "false" ]; then
				prompt "Git repo to clone as wp-content (leave blank to skip)"
				read -r git_repo
			fi
		fi

		if [ -z "$db_import" ]; then
			if [ "$use_defaults" = "false" ]; then
				prompt "Local SQL file to import for database (leave blank to skip)"
				read -r db_import
			fi
		fi

		if [ -z "$remove_defaults" ]; then
			if [ "$use_defaults" = "false" ]; then
				prompt "Remove default themes and plugins? (y/N)"
				read -r remove_defaults
			fi
		fi

		add_placeholder_content="";
		if [ -z "$placeholder_content" ]; then
			if [ "$use_defaults" = "false" ]; then
				prompt "Add sample content to site (y/N)"
				read -r placeholder_content
			fi
			if [[ $placeholder_content = "y" ]]; then
				add_placeholder_content="curl -s https://raw.githubusercontent.com/manovotny/wptest/master/wptest.xml > import.xml && wp plugin install wordpress-importer --allow-root  && wp plugin activate wordpress-importer --allow-root  && wp import import.xml --authors=skip --allow-root && rm import.xml"
			fi
		fi

		# Ask if WP_DEBUG should be turned on
		while [ -z "$wp_debug" ]; do
			if [ "$use_defaults" = "false" ]; then
				prompt "Enable WP_DEBUG and WP_DEBUG_LOG (y/N)"
				read -r wp_debug
			fi
			if [[ $wp_debug != 'y' && $wp_debug != 'n' ]]; then
				wp_debug="n"
			fi
		done

		if [[ $image_proxy = "true" ]]; then
			while [ -z "$live_site_url" ]; do
				if [ "$use_defaults" = "false" ]; then
					prompt "Live site URL (no http:// or trailing slash)"
					read -r live_site_url
				fi
			done
		fi
	fi

	if [[ -z "$username" ]]; then
		username="admin"
	fi
	if [[ -z "$password" ]]; then
		password="password"
	fi
	if [[ -z "$email" ]]; then
		email="admin@localhost.dev"
	fi
}

confirm_site_creation() {
	# Inform the user of what's about to happen and give them a chance to back out
	# =============================================================================
	info "\nAbout to perform the following:"
	# @ TODO
	echo -e "* Halt Vagrant (if running)\n* Create directory $site in $path/"$sites_folder"\n* Create files vvv-init.sh, wp-cli.yml, and vvv-hosts in directory $site\n* Create file $site.conf in $path/config/nginx-config/sites"
	if [[ -z "$files_only" ]]; then
		echo -e "* Run \`vagrant up --provision\` to initialize site"
	else
		warning "\nNote: You will need to run \`vagrant up --provision\` to initialize the new site before $domain will load in a browser."
	fi

	info "\nProvisioning Vagrant will do the following:"
	if [ "$no_wp" = "false" ]; then
		echo -e "* Create database $site\n* Install WordPress $version in the $web_root directory\n* Make the site visible at $domain"
	fi

	info "\n"
	while [ -z "$continue_create" ]; do
		prompt "Continue (y/n)? "
		read -r continue_create

		if [[ $continue_create = 'n' ]]; then
			error "Site setup aborted."
			exit
		elif [[ $continue_create != 'y' ]]; then
			error "Answer y or n."
			unset continue_create
		fi
	done

	success "New VVV setup starting for site '$site'"
	cd "$path"
	vagrant halt
}

create_site_files(){
	# Create site folder with vvv-init.sh file
	# =============================================================================
	cd "$path"/"$sites_folder"
	info "Creating site directory, wp-cli.yml, and vvv-init.sh file... "
	if [ ! -d "$site" ]; then
		mkdir "$site"
	fi
	cd "$site"

	if [ "$no_wp" = "false" ]; then
		printf "path: %s" "$web_root" > wp-cli.yml
	fi

	wp_debug_text=''
	if [[ $wp_debug = 'y' ]]; then
		wp_debug_text=" --extra-php <<PHP
define('WP_DEBUG', true);
define('WP_DEBUG_LOG', true);
PHP"
	fi

	blueprint_text=''
	if [[ ! -z "$blueprint" ]]; then
		cp "$path"/vv-blueprints.json "$path"/"$sites_folder"/"$site"/vv-blueprints.json
		blueprint_text="curl -o vv-install -s https://raw.githubusercontent.com/bradp/vv/vv-install/vv-install && php vv-install $blueprint $web_root && rm vv-blueprints.json"
	fi

	if [[ ! -z "$db_import" ]]; then
		cp "$db_import" "$path"/"$sites_folder"/"$site"/"$site".sql
	fi

	db_init=""
	if [[ ! -z "$db_import" ]]; then
		db_init="wp db import ../$site.sql --allow-root && rm ../$site.sql"
	fi

	if [ "$no_wp_with_db" = "true" ]; then
		if [ ! -e "$path"/database/init-custom.sql ]; then
			touch "$path"/database/init-custom.sql
		fi
		printf "\nCREATE DATABASE IF NOT EXISTS \`%s\`;\n"\
"GRANT ALL PRIVILEGES ON \`%s\`.* TO 'wp'@'localhost' IDENTIFIED BY 'wp';\n" "$db_name" "$db_name" >> "$path"/database/init-custom.sql

		if [[ ! -z "$db_import" ]]; then
			{
				echo "if [ ! -d \"$web_root/wp-admin\" ]; then"
				echo "	echo 'Making the correct directories and adding DB in $site/$web_root...'"
				echo "	if [ ! -d \"./$web_root\" ]; then"
				echo "		mkdir ./$web_root"
				echo "	fi"
				echo "	cd ./$web_root"
				echo "	$db_init"
				echo "	"
				echo "	cd -"
				echo "$blueprint_text"
				echo "fi"
			} >> vvv-init.sh
		fi
	fi

	if [ "$no_wp" = "false" ]; then
		# Create SQL commands for database creation
		# =============================================================================
		if [ ! -e "$path"/database/init-custom.sql ]; then
			touch "$path"/database/init-custom.sql
		fi

		maybe_remove_defaults=""
		if [[ "$remove_defaults" = "y" ]]; then
			maybe_remove_defaults="wp theme delete twentythirteen --allow-root; wp theme delete twentyfourteen --allow-root; wp theme delete twentyfifteen --allow-root; wp plugin delete hello --allow-root; wp plugin delete aksimet --allow-root; git checkout HEAD ."
		fi

		install_method="wp core download --allow-root $installversion"
		config="wp core config --dbname=\"$db_name\" --dbuser=wp --dbpass=wp --dbhost=\"localhost\" --allow-root$wp_debug_text"
		core="wp core $install_text --url=$domain --title=\"$site\" --admin_user=$username --admin_password=$password --admin_email=$email --allow-root"
		if [ "$wpskeleton" = "true" ]; then
			install_method="git clone --recursive https://github.com/markjaquith/WordPress-Skeleton.git . "
			config="echo \"<?php define( 'DB_NAME', '$db_name' ); define( 'DB_USER', 'wp' ); define( 'DB_PASSWORD', 'wp' ); define( 'DB_HOST', 'localhost' );\" >> local-config.php"
			core=""
		fi
		printf "\nCREATE DATABASE IF NOT EXISTS \`%s\`;\n"\
"GRANT ALL PRIVILEGES ON \`%s\`.* TO 'wp'@'localhost' IDENTIFIED BY 'wp';\n" "$db_name" "$db_name" >> "$path"/database/init-custom.sql

		{
			echo "if [ ! -d \"$web_root/wp-admin\" ]; then"
			echo "	echo 'Installing WordPress $version in $site/$web_root...'"
			echo "	if [ ! -d \"./$web_root\" ]; then"
			echo "		mkdir ./$web_root"
			echo "	fi"
			echo "	cd ./$web_root"
			echo "	$install_method"
			echo "	$config"
			echo "	$core"
			echo "	$add_placeholder_content"
			echo "	$db_init"
			echo "  $maybe_remove_defaults"
			echo "	"
			echo "	cd -"
			echo "$blueprint_text"
			echo "fi"
		} >> vvv-init.sh
	fi

	echo "Done"

	# Add vvv-hosts file for domain in the site's "$sites_folder" root
	# =============================================================================
	cd "$path"/"$sites_folder"/"$site"
	info "Adding $domain to new vvv-hosts file... "
	touch vvv-hosts
	printf "%s\n" "$domain" >> vvv-hosts
	echo "Done"

	if [ ! -z "$git_repo" ]; then
		git clone --recursive "$git_repo" $web_root/wp-content
	fi

	# Add site conf file to nginx-config
	# =============================================================================
	cd "$path"/config/nginx-config/sites
	info "Creating nginx-config/sites/$site.conf... "

	nginx_domain_text="$domain"
	if [[ $multisite = 'y' ]] && [[ $ms_type = 'subdomain' ]]; then
		nginx_domain_text="$domain $multisite_domains"
	fi
	xip_domain=" ~^"$site"\\\.\\\d+\\\.\\\d+\\\.\\\d+\\\.\\\d+\\\.xip\\\.io$"
	nginx_domain_text="$nginx_domain_text""$xip_domain"

	sed -e "s/testserver\.com/$nginx_domain_text/" \
		-e "s|wordpress-local|$site/$web_root|" local-nginx-example.conf-sample > "$site".conf

	if [[ $image_proxy = "true" ]]; then
		sed -e $'s|\}| location ~ ^/wp-content/uploads/(.*) \{ rewrite ^/wp-content/uploads/(.*)$ http://LIVE_URL/wp-content/uploads/$1 redirect; \} \}|' -e "s|LIVE_URL|"$live_site_url"|" "$site".conf > tmp.conf
		rm "$site".conf
		mv tmp.conf "$site".conf
	fi

	echo "Done"
}

run_vagrant_up() {
	# vagrant waaaaay up
	# =============================================================================
	cd "$path"
	if [[ -z "$files_only" ]]; then
		info "Running vagrant up --provision... "
		vagrant up --provision
	fi
}

creation_success_message() {
	# OMG we're done.
	# =============================================================================
	if [[ "$files_only" = "true" ]]; then
		info "\nRemember to run \`vagrant up --provision\` to initialize the new site."
	fi

	success "New VVV Site Setup: Done!"
	echo "Directory: $path/"$sites_folder"/$site"
	echo "URL:       $domain"
	echo "Username:  $username"
	echo "Password:  $password"
}

create_site() {
	site_creation_questions
	confirm_site_creation
	create_site_files
	run_vagrant_up
	creation_success_message
	exit
}

not_valid_site() {
	if [[ -z $site || ! -d "$path/"$sites_folder"/$site" ]]; then
		error "You must enter a valid directory from $path/"$sites_folder"/."
		unset site
	elif [[ $site = 'wordpress-default' || $site = 'wordpress-develop' || $site = 'wordpress-trunk' || $site = 'default' || $site = 'phpcs' || $site = 'vvv-hosts' || $site = 'wp-cli' || $site = '.gitshow' ]]; then
		error "This script can't delete the default VVV folders."
		unset site
	fi
}

remove_site() { # @TODO refactor this if we need to
	info "VVV Site Removal"

	if [[ ! -z $site ]]; then
		not_valid_site
	fi

	# Get site dir name if not supplied as argument
	while [ -z "$site" ]; do
		prompt "Site directory to delete"
		read -r site
		not_valid_site
	done

	info "\nAbout to perform the following:\n\n* Halt Vagrant (if running)\n* Delete directory $site in $path/"$sites_folder"\n* Delete file $site.conf in $path/config/nginx-config/sites\n* Remove database creation commands from init-custom.sql\n* Remove any deployments for $site set up with vv\n"
	while [ -z "$continue_delete" ]; do
		prompt "Continue (y/n) "
		read -r continue_delete
		if [ "$continue_delete" = 'y' ]; then
			info "\nVVV teardown starting for site '$site'"
			cd "$path"

			vagrant halt

			# Delete the site folder
			info "Removing directory $site... "
			rm -rf "$path"/"$sites_folder"/"$site"
			echo "Done"

			# Remove the nginx conf file
			info "Removing nginx config file $site.conf... "
			rm "$path"/config/nginx-config/sites/"$site".conf
			echo "Done"

			# Remove the database creation from init-custom.sql
			info "Removing the database creation commands from init-custom.sql... "
			cd "$path"/database
			sed "/\`$site\`/d" < init-custom.sql > init-custom.sql.tmp
			rm init-custom.sql
			mv init-custom.sql.tmp init-custom.sql
			cd "$path"
			echo "Done"

			info "Removing database"
			rm -rf "$path"/database/data/"$site"
			echo "Done"

			info "Removing any set up deployments. "
			remove_site_remove_all_deployment
			echo "Done"

			# Deleted.
			success "\nVVV Site Teardown: Done!"
			exit

		elif [ "$continue_delete" = 'n' ]; then
			error "Site teardown aborted."
			exit
		else
			error "Answer y or n."
			unset continue_delete
		fi
	done
	exit
}

deployment_setup_prompt() {
	info "Setting up a deployment."

	if [[ ! -z $site ]]; then
		not_valid_site
	fi

	# Get site dir name if not supplied as argument
	while [ -z "$site" ]; do
		prompt "Which site would you like to setup a deployment for? "
		read -r site
		not_valid_site
	done

}

deployment_removal_prompt() {
	if [[ ! -z $site ]]; then
		not_valid_site
	fi

	# Get site dir name if not supplied as argument
	while [ -z "$site" ]; do
		prompt "Which site would you like to remove the deployment for? "
		read -r site
		not_valid_site
	done

	while [ -z "$deployment_name" ]; do
		prompt "Name of deployment to remove "
		read -r deployment_name
	done

	remove_deployment

}

deployment_setup() {
	deployment_setup_prompt
	info "Setting up (S)FTP deployment for $site"

	while [ -z "$deployment_name" ]; do
		prompt "Name of deployment (production, staging, other, etc) "
		read -r deployment_name
	done

	while [ -z "$host" ]; do
		prompt "Host (if SFTP, define port as host:port) "
		read -r host
	done

	while [ -z "$username" ]; do
		prompt "FTP Username "
		read -r username
	done

	while [ -z "$password" ]; do
		prompt "FTP Password "
		read -r password
	done

	if [ -z "$passive" ]; then
		prompt "Use Passive transfer mode? (Y/n) "
		read -r passive
	fi
	if [[ "$passive" = "n" ]]; then
		passive="false"
	else
		passive="true"
	fi


	while [ -z "$secure" ]; do
		prompt "Use SFTP? (y/N)"
		read -r secure
	done
	if [[ "$secure" = "y" ]]; then
		secure="true"
	else
		secure="false"
	fi

	while [ -z "$destination" ]; do
		prompt "Destination path ( You probably want / or ~/public_html )"
		read -r destination
	done

	info "Setting up a deployment in your VVV Vagrantfile with the following information: "
	echo "	Site: $site"
	echo "	Deployment name: $deployment_name"
	echo "	Host: $host"
	echo "	Username: $username"
	echo "	Password: $password"
	echo "	Passive Mode: $passive"
	echo "	Secure Mode: $secure"
	echo "	destination: $destination"
	cp "$path/Vagrantfile" "$path/Vagrantfile-backup"

echo "$(sed  '$ d' < "$path/Vagrantfile")" > "$path/Vagrantfile"
{
	echo "# begin-vv-$site-$deployment_name"
	echo "	config.push.define \"$site-$deployment_name\", strategy: \"ftp\" do |push|"
	echo "		push.host =\"$host\""
	echo "		push.username =\"$username\""
	echo "		push.password =\"$password\""
	echo "		push.passive =\"$passive\""
	echo "		push.secure =\"$secure\""
	echo "		push.destination =\"$destination\""
	echo "		push.dir = \"$path/"$sites_folder"/$site/htdocs\""
	echo "		push.exclude = \"wp-config.php\""
	echo "	end"
	echo "# end-vv-$site-$deployment_name"
} >> "$path/Vagrantfile"
	echo "end" >> "$path/Vagrantfile"
	success "Deployment setup finished. You can now deploy with a 'vv -v push $site-$deployment_name'"
}

remove_site_remove_all_deployment() {
	sed "/\# begin-vv-"$site"/,/\# end-vv-"$site"/d" "$path/Vagrantfile" > "$path/Vagrantfile.tmp"
	mv "$path/Vagrantfile" "$path/Vagrantfile-backup"
	mv "$path/Vagrantfile.tmp" "$path/Vagrantfile"
}

remove_deployment() {
	while [ ! "$remove_deployment_confirm" = "confirm" ]; do
		prompt "Are you sure you want to remove this site's deployment? (type confirm for yes )"
		read -r remove_deployment_confirm
	done
	sed "/\# begin-vv-"$site"-"$deployment_name"/,/\# end-vv-"$site"-"$deployment_name"/d" "$path/Vagrantfile" > "$path/Vagrantfile.tmp"
	mv "$path/Vagrantfile" "$path/Vagrantfile-backup"
	mv "$path/Vagrantfile.tmp" "$path/Vagrantfile"

	success "Deployment for $site removed."
}

deployment_config() {
	$EDITOR "$path/Vagrantfile"
}

create_blueprints() {
	if [[ ! -f "$path"/vv-blueprints.json ]]; then
		curl -o "$path"/vv-blueprints.json -s https://raw.githubusercontent.com/bradp/vv/vv-install/vv-blueprints.json
		success "Created sample blueprints file at $path/vv-blueprints.json."
	else
		info "You already have a vv-blueprints.json file created."
	fi
}

parse_the_args() {

    	if [ ! -z "$list" ]; then
        	list_sites
   	fi
    	if [ ! -z "$create" ]; then
        	create_site
    	fi
    	if [ ! -z "$remove" ]; then
        	remove_site
    	fi
   	if [ ! -z "$deployment_setup" ]; then
    		deployment_setup
    	fi
    	if [ ! -z "$deployment_remove" ]; then
    		deployment_removal_prompt
    	fi
   	if [ ! -z "$deployment_config" ]; then
   		deployment_config
   	fi
   	 if [ ! -z "$blueprint_init" ]; then
		create_blueprints
	fi
	if [ ! -z "$lets_update" ]; then
   		install_update
	fi
   	if [ ! -z "$force_update" ]; then
   		vv_bootstrap_update
	fi
}

check_args() {
	while [ ! -z "$1" ]; do
		case "$1" in
			-h|--help|help|h|what)
				local help=0
				shift
				;;
			-p|--path)
				argument_expected "$1" "$2"
				path=$2
				shift 2
				;;
			-wr|--wr|--web-root|--web_root|--webroot|--directory|--file-path|--filepath)
				argument_expected "$1" "$2"
				web_root=$2
				shift 2
				;;
			-d|--domain)
				argument_expected "$1" "$2"
				domain=$2
				shift 2
				;;
			-u|--live-url|--live_url|--liveurl)
				argument_expected "$1" "$2"
				live_site_url=$2
				shift 2
				;;
			-n|--name)
				argument_expected "$1" "$2"
				site=$2
				shift 2
				;;
			-wv|--wv|--wp-version|--wp_version|--wpversion)
				argument_expected "$1" "$2"
				version=$2
				shift 2
				;;
			--username)
				argument_expected "$1" "$2"
				username=$2
				shift 2
				;;
			--password)
				argument_expected "$1" "$2"
				password=$2
				shift 2
				;;
			--email)
				argument_expected "$1" "$2"
				email=$2
				shift 2
				;;
			--git-repo|--git_repo|--gitrepo|-gr)
				argument_expected "$1" "$2"
				git_repo=$2
				shift 2
				;;
			-m|--multi-site|--multi_site|--multisite)
				argument_expected "$1" "$2"
				ms_type=$2
				shift 2
				;;
			--host)
				argument_expected "$1" "$2"
				host=$2
				shift 2
				;;
			--username)
				argument_expected "$1" "$2"
				username=$2
				shift 2
				;;
			--password)
				argument_expected "$1" "$2"
				password=$2
				shift 2
				;;
			--passive)
				argument_expected "$1" "$2"
				passive=$2
				shift 2
				;;
			--secure)
				argument_expected "$1" "$2"
				secure=$2
				shift 2
				;;
			--destination)
				argument_expected "$1" "$2"
				destination=$2
				shift 2
				;;
			--deployment-name|--deployment_name|--deploymentname)
				argument_expected "$1" "$2"
				deployment_name=$2
				shift 2
				;;
			-b|--blue-print|--blue_print|--blueprint)
				argument_expected "$1" "$2"
				blueprint=$2
				shift 2
				;;
			-v|v|--vagrant|vagrant)
				argument_expected "$1" "$2"
				get_vvv_path
				cd "$path"
				echo "$(vagrant "$2");"
				exit
				shift 2
				;;
			-db|--database)
				argument_expected "$1" "$2"
				db_import=$2
				shift 2
				;;
			-fsf|--force-sites-folder)
				argument_expected "$1" "$2"
				sites_folder="$2/"
				shift 2
				;;
			-r|-rm|--rm|rm|--remove|remove|--delete|delete|--teardown|teardown)
				remove="true"
				shift
				;;
			-l|--list|list|-s|--show|show)
				list="true"
				shift
				;;
			-c|--create|create|-n|--new|new|-m|--make|make)
				create="true"
				shift
				;;
			-f|--files)
				files_only="true"
				shift
				;;
			-i|--images)
				image_proxy="true"
				shift
				;;
			-x|--debug)
				wp_debug="y"
				shift
				;;
			-fp|--fp|--force-path|--force_path|--forcepath)
				force_path="true"
				shift
				;;
			--version)
				version
				shift
				;;
			--porcelain)
				clean="true"
				shift
				;;
			--defaults)
				use_defaults="true"
				shift
				;;
			-sc|--sc|--sample-content|--sample_content|--samplecontent)
				placeholder_content="y"
				shift
				;;
			--rd|--remove-defaults)
				remove_defaults="y"
				shift
				;;
			--about|about)
				about
				exit
				shift
				;;
			--deploy|deploy|--deployment|deployment|--deployment-create|deployment-create|--deploy-create|deploy-create|--deployment-setup|deployment-setup|--deploy-setup|deploy-setup)
				deployment_setup="true"
				shift
				;;
			--deployment-remove|deployment-remove|--deploy-remove|deploy-remove|--deployment-teardown|deployment-teardown|--deploy-teardown|deploy-teardown|--deployment-delete|deployment-delete|--deploy-delete|deploy-delete)
				deployment_remove="true"
				shift
				;;
			--confirm-removal|--confirm_removal|--confirmremoval)
				remove_deployment_confirm="confirm"
				shift
				;;
			--deployment-config|deployment-config|--deploy-config|deploy-config|--deployment-edit|deployment-edit|--deploy-edit|deploy-edit)
				deployment_config="true"
				shift
				;;
			update|--update)
				lets_update="true"
				shift
				;;
			--force-update|--force_update|--forceupdate)
				force_update="true"
				info "Forcing boostrapped update..."
				shift
				;;
			-bi|--bi|bi|--blueprint-init|blueprint-init|--blueprintinit|blueprintinit)
				blueprint_init="true"
				shift
				;;
			--blank)
				no_wp="true"
				shift
				;;
			--blank-with-db)
				no_wp="true"
				no_wp_with_db="true"
				shift
				;;
			--wpskeleton|--skel,-skel)
				wpskeleton="true"
				shift
				;;
			*)
				fail "Unknown option $1"
				shift
				;;
		esac
	done

	if [ ! -z $help ]; then
		show_help $help
	fi

	get_vvv_path
	parse_the_args
	exit 0
}

main() {
	auto_update_main

	if [ -z "$1" ]; then
	    show_help
		showing_help="true"
	fi

	check_for_config_file
	check_for_update
	use_defaults="false"
	no_wp="false"
	no_wp_with_db="false"
	sites_folder="www"
	check_args "$@"

}

main "$@"
