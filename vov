#!/bin/bash

VOV_VERSION='0.1-dev'

###
### terminal output formatting
###
COLOUR_BTW='\033[90m'
COLOUR_WHITE='\033[01;37m'
COLOUR_YELLOW='\033[01;33m'
COLOUR_RESTORE='\033[0m'
COLOUR_RED='\033[91m'

                          
function echo_w {
    echo -e "$COLOUR_WHITE$1$COLOUR_RESTORE"
}

function echo_y {
    echo -e "$COLOUR_YELLOW$1$COLOUR_RESTORE"
}


# Ask user a yes/no question and insist on an answer.
#
# Return the result: 1 for yes, 0 for no.
#
# Arguments:
# 	1. Question text
#   2. Default result (when user just presses Enter): 0|1
#	3. Variable name for return value
function yes_no_question {
	
	local QUESTION_TEXT="$1"
	local DEFAULT_RESULT="$2"
	local RETURN_VARIABLE="$3"
	
	while true; do
		read -p "$QUESTION_TEXT " yn
		case $yn in
			[Yy]* ) 
				local RESULT="1"
				break
				;;
			[Nn]* ) 
				local RESULT="0" 
				break
				;;
			"" )
				local RESULT="$DEFAULT_RESULT"
				break
				;;
			* ) 
				echo "Please answer yes or no."
				;;
		esac
	done
	
	eval $RETURN_VARIABLE="'$RESULT'"
}


# Ask user for credentials.
#
# Allows to skip answering on empty input.
#
# Arguments:
#	1. Question text.
#	2. Additional description.
#	3. Return variable that will be set to 1 when user provides input
#      and to 0 otherwise.
#	4. Return variable for username
#	5. Return variable for password
function prompt_for_credentials {

	local QUESTION_TEXT="$1"
	local DESCRIPTION_TEXT="$2"
	local RET_RESULT="$3"
	local RET_USERNAME="$4"
	local RET_PASSWORD="$5"

	echo_w "$QUESTION_TEXT"
	echo -e "$DESCRIPTION_TEXT"
	echo

	read -p "User name: " PFC_IN_USERNAME

	if [ -z "$PFC_IN_USERNAME" ]; then
		eval $RET_RESULT=0
		return 0
	else
		eval $RET_RESULT=1
		eval $RET_USERNAME="\"$PFC_IN_USERNAME\""
	fi

	local PASSWORD_FIRST=""
	local PASSWORD_SECOND=""
	local PASSWORDS_MATCH=0

	until [ $PASSWORDS_MATCH == 1 ]; do
		read -s -p "Password: " PASSWORD_FIRST; echo
		read -s -p "Repeat password: " PASSWORD_SECOND; echo

		echo
		
		if [ "$PASSWORD_FIRST" == "$PASSWORD_SECOND" ]; then
			PASSWORDS_MATCH=1
		else
			echo "Passwords don't match. Please repeat."
		fi
	done

	eval $RET_PASSWORD="\"$PASSWORD_FIRST\""
}


function fix_permissions {
	EXECUTABLE_FILES=(
		config/homebin/*
		config/vvv-init-after-each.sh
		database/import-sql.sh
		provision/*
	)

	for FILE in "${EXECUTABLE_FILES[@]}"; do
		chmod +x "$FILE"
	done
}


function run_sudo {
	sudo echo "Superuser privileges granted"
}


# urlencode for git credentials
# http://stackoverflow.com/a/10660730
function rawurlencode {
  local string="${1}"
  local strlen=${#string}
  local encoded=""

  for (( pos=0 ; pos<strlen ; pos++ )); do
     c=${string:$pos:1}
     case "$c" in
        [-_.~a-zA-Z0-9] ) o="${c}" ;;
        * )               printf -v o '%%%02x' "'$c"
     esac
     encoded+="${o}"
  done
  echo "${encoded}"
}


###
### vov init
###

# todo install vagrant plugins (add option to disable this)

function vov_init {

	# constants
	CONFIG_HEADER='#\n# This is a generated file for custom modification of Vagrant options.\n# Do not change it manually, use the Customfile instead.\n#\n'
	CONFIG_32BIT_BOX='config.vm.box = "ubuntu/trusty32"\n'
	CONFIG_LOWMEM_BOX='config.vm.provider :virtualbox do |v|\n    v.customize ["modifyvm", :id, "--memory", 384]\nend\n'
	CONFIG_TWO_CPUS='config.vm.provider :virtualbox do |v|\n    v.customize ["modifyvm", :id, "--cpus", 2]\nend\n'
	SVN_CREDENTIALS_FILE="config/checkout-credentials/onthegosystems_com_misc_svn"
	GITLAB_CREDENTIALS_FILE="config/checkout-credentials/git_onthegosystems_com"

  IS_CYGWIN=0
  if [ `uname -o` == "Cygwin" ]; then
    echo "Cygwin detected. Welcome, Windows user!"
    IS_CYGWIN=1
  fi
    
	# user input
	yes_no_question "Do you want to use a 32bit box instead of 64bit? [y/N]" 0 IN_32BIT_BOX
	yes_no_question "Activate low-memory mode for the box? [y/N]" 0 IN_LOWMEM_BOX
	yes_no_question "Install Vagrant plugins recommended by VVV? [Y/n]" 1 IN_VAGRANT_PLUGINS
	yes_no_question "Should the box have two CPU cores instead of one? [y/N]" 0 IN_TWO_CPUS

	prompt_for_credentials "Please enter SVN credentials for onthegosystems.com/misc_svn:" "Press only Enter to skip this step." IN_IS_SVN IN_SVN_USERNAME IN_SVN_PASSWORD

	prompt_for_credentials "Please enter GIT credentials for git.onthegosystems.com:" "Press only Enter to skip this step." IN_IS_GIT IN_GITLAB_USERNAME IN_GITLAB_PASSWORD
		
	yes_no_question "Ready to apply the customisations. Continue? [Y/n]" 1 IN_CONTINUE
	echo

	# exit if user doesn't want to continue
	if [ "$IN_CONTINUE" == "0" ];
	then
		exit
	fi
	
	
	# install vagrant plugins
	if [ "$IN_VAGRANT_PLUGINS" == "1" ];
	then
		echo_w "Attempting to install Vagrant plugins..."
    
    vagrant plugin install vagrant-hostsupdater
		vagrant plugin install vagrant-triggers

	fi
	
	
	# write SVN credentials into the appropriate file
	if [ $IN_IS_SVN == 1 ]; then
		echo_w "Saving SVN credentials for onthegosystems.com/misc_svn..."
		echo -e "$IN_SVN_USERNAME\n$IN_SVN_PASSWORD" > $SVN_CREDENTIALS_FILE
	fi

	# write Gitlab credentials
	if [ $IN_IS_GIT == 1 ]; then
		echo_w "Saving GIT credentials for git.onthegosystems.com..."
		IN_GITLAB_USERNAME=$( rawurlencode "$IN_GITLAB_USERNAME" )
		IN_GITLAB_PASSWORD=$( rawurlencode "$IN_GITLAB_PASSWORD" )
		echo -e "$IN_GITLAB_USERNAME\n$IN_GITLAB_PASSWORD" > $GITLAB_CREDENTIALS_FILE
	fi
	
	# generate the VOVfile
	echo_w "Writing to VOVfile..."
	
	echo -e "$CONFIG_HEADER" > VOVfile

	if [ "$IN_32BIT_BOX" == "1" ];
	then
		echo -e "$CONFIG_32BIT_BOX" >> VOVfile
	fi
	
	if [ "$IN_LOWMEM_BOX" == "1" ];
	then
		echo -e "$CONFIG_LOWMEM_BOX" >> VOVfile
	fi

	if [ "$IN_TWO_CPUS" == "1" ];
	then
		echo -e "$CONFIG_TWO_CPUS" >> VOVfile
	fi

	# fix permissions for scripts
	echo_w "Fixing permissions for executable files..."
	fix_permissions

	echo_w "Finished."
	echo
	echo_w "Now you are ready to run VOV with command:$COLOUR_YELLOW vagrant up"
	echo
}




###
### vov create site
###

function vov_create_site {
	
	SITE_NAME=$1
	shift
	SITE_DOMAIN="$SITE_NAME.wordpress.dev"

	# Very basic input validation
	SITE_CHECK=$( rawurlencode "$SITE_NAME" )
	if [ "$SITE_NAME" != "$SITE_CHECK" ]; then
		echo_w "'$SITE_NAME' is not a valid site name."
		return
	fi

	SITE_ARGS="--name $SITE_NAME --domain $SITE_DOMAIN --debug"

	# Defaults
	IS_BUNDLE_SITE=0 # If 1, this is a site with a bundle checkout
	BUNDLE_VERSION=0
	
	# Parse additional commandline parameters

	OPTIND=1
	while [ ! -z "$1" ]; do
		case "$1" in
		--bundle)
			IS_BUNDLE_SITE=1
			BUNDLE_NAME="$2"
			BUNDLE_VERSION="$3"
			shift 3
			;;
		esac
	done

	if [ $IS_BUNDLE_SITE == 1 ]; then
		BUNDLE_ARGS="--bundle \"$BUNDLE_NAME\" \"$BUNDLE_VERSION\""
	else
		BUNDLE_ARGS=""
	fi

	# Run the VV utility
	echo_w "Running vv..."
	echo "SITE_ARGS=$SITE_ARGS"
	echo "BUNDLE_ARGS=$BUNDLE_ARGS"
	externals/vv/vv create $SITE_ARGS $BUNDLE_ARGS

	echo_w "vv finished."
}


###
### main
###

echo
echo_y "                                _    ______ _    __"
echo_y "                               | |  / / __ \ |  / /"
echo_y "                               | | / / / / / | / / "
echo_y "                               | |/ / /_/ /| |/ /  "
echo_y "                               |___/\____/ |___/   "
echo
echo_y "                                                    ...just VOV!"
echo

# parse input and execute the right action

# TODO print help on invalid input

IN_ACTION="$1"

case "$IN_ACTION" in

	version)
		echo
		echo_w "VOV version is $VOV_VERSION".
		echo
		;;

    init)
		shift
		vov_init
		;;

	# run vagrant commands but invoke sudo first
	# so the user can enter their password immediately and is not
	# bothered by vagrant-hostsupdater anymore
	
	up)
		run_sudo
		vagrant up
		;;

	suspend)
		run_sudo
		vagrant suspend
		;;

	halt)
		run_sudo
		vagrant halt
		;;
		

	# operation on a site
	site)
		shift
		IN_SITE_ACTION="$1"
		IN_SITE_NAME="$2"
		case "$IN_SITE_ACTION" in

			# create a site
			create)

				# first two arguments processed, rest will be passed to vov_create_site
				shift 2 
				vov_create_site "$IN_SITE_NAME" "$@"
				
				;;
				
			delete)
				;;
			*)
				echo_w "Unknown site action. Specify 'create' or 'delete'."
				;;
		esac
		;;
	*)
		echo_w "Unknown action. Specify 'init' or 'site'."
		;;
esac
