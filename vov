#!/bin/bash

###
### terminal output formatting
###
COLOUR_BTW='\033[90m'
COLOUR_WHITE='\033[01;37m'
COLOUR_YELLOW='\033[01;33m'
COLOUR_RESTORE='\033[0m'
COLOUR_RED='\033[91m'


function echo_w {
    echo -e "$COLOUR_WHITE$1$COLOUR_RESTORE"
}

function echo_y {
    echo -e "$COLOUR_YELLOW$1$COLOUR_RESTORE"
}


# Ask user a yes/no question and insist on an answer.
#
# Return the result: 1 for yes, 0 for no.
#
# Arguments:
# 	1. Question text
#   2. Default result (when user just presses Enter): 0|1
#	3. Variable name for return value
function yes_no_question {
	
	local QUESTION_TEXT="$1"
	local DEFAULT_RESULT="$2"
	local RETURN_VARIABLE="$3"
	
	while true; do
		read -p "$QUESTION_TEXT " yn
		case $yn in
			[Yy]* ) 
				local RESULT="1"
				break
				;;
			[Nn]* ) 
				local RESULT="0" 
				break
				;;
			"" )
				local RESULT="$DEFAULT_RESULT"
				break
				;;
			* ) 
				echo "Please answer yes or no."
				;;
		esac
	done
	
	eval $RETURN_VARIABLE="'$RESULT'"
}


function fix_permissions {
	EXECUTABLE_FILES=(
		config/homebin/*
		config/vvv-init-after-each.sh
		database/import-sql.sh
		provision/*
	)

	for FILE in "${EXECUTABLE_FILES[@]}"; do
		chmod +x "$FILE"
	done
}


###
### vov init
###

# todo install vagrant plugins (add option to disable this)

function vov_init {

	# constants
	CONFIG_HEADER='#\n# This is a generated file for custom modification of Vagrant options.\n# Do not change it manually, use the Customfile instead.\n#\n'
	CONFIG_32BIT_BOX='config.vm.box = "ubuntu/trusty32"\n'
	CONFIG_LOWMEM_BOX='config.vm.provider :virtualbox do |v|\n    v.customize ["modifyvm", :id, "--memory", 384]\nend\n'
	CONFIG_TWO_CPUS='config.vm.provider :virtualbox do |v|\n    v.customize ["modifyvm", :id, "--cpus", 2]\nend\n'
	SVN_CREDENTIALS_FILE="config/checkout-credentials/onthegosystems_com_misc_svn"
	GITLAB_CREDENTIALS_FILE="config/checkout-credentials/git_onthegosystems_com"

	# user input
	yes_no_question "Do you want to use a 32bit box instead of 64bit? [y/N]" 0 IN_32BIT_BOX
	yes_no_question "Activate low-memory mode for the box? [y/N]" 0 IN_LOWMEM_BOX
	yes_no_question "Install Vagrant plugins recommended by VVV? [Y/n]" 1 IN_VAGRANT_PLUGINS
	yes_no_question "Should the box have two CPU cores instead of one? [y/N]" 0 IN_TWO_CPUS
	
	read -p "Enter SVN user name for onthegosystems.com/misc_svn: " IN_SVN_USERNAME
	read -s -p "Enter SVN password for onthegosystems.com/misc_svn: " IN_SVN_PASSWORD; echo

	read -p "Enter GIT user name for git.onthegosystems.com: " IN_GITLAB_USERNAME
	read -s -p "Enter SVN password for git.onthegosystems.com: " IN_GITLAB_PASSWORD; echo
		
	yes_no_question "Ready to apply the customisations. Continue? [Y/n]" 1 IN_CONTINUE
	echo

	# exit if user doesn't want to continue
	if [ "$IN_CONTINUE" == "0" ];
	then
		exit
	fi
	
	
	# install vagrant plugins
	if [ "$IN_VAGRANT_PLUGINS" == "1" ];
	then
		echo_w "Attempting to install Vagrant plugins..."
		vagrant plugin install vagrant-hostsupdater
		vagrant plugin install vagrant-triggers
	fi
	
	
	# write SVN credentials into the appropriate file
	echo_w "Saving SVN credentials for onthegosystems.com/misc_svn..."
	
	echo -e "$IN_SVN_USERNAME\n$IN_SVN_PASSWORD" > $SVN_CREDENTIALS_FILE

	# write Gitlab credentials
	echo_w "Saving GIT credentials for git.onthegosystems.com..."

	echo -e "$IN_GITLAB_USERNAME\n$IN_GITLAB_PASSWORD" > $GITLAB_CREDENTIALS_FILE
	
	# generate the VOVfile
	echo_w "Writing to VOVfile..."
	
	echo -e "$CONFIG_HEADER" > VOVfile

	if [ "$IN_32BIT_BOX" == "1" ];
	then
		echo -e "$CONFIG_32BIT_BOX" >> VOVfile
	fi
	
	if [ "$IN_LOWMEM_BOX" == "1" ];
	then
		echo -e "$CONFIG_LOWMEM_BOX" >> VOVfile
	fi

	if [ "$IN_TWO_CPUS" == "1" ];
	then
		echo -e "$CONFIG_TWO_CPUS" >> VOVfile
	fi

	# fix permissions for scripts
	echo_w "Fixing permissions for executable files..."
	fix_permissions

	echo_w "Finished."
	echo
	echo_w "Now you are ready to run VOV with command:$COLOUR_YELLOW vagrant up"
	echo
}


###
### vov create site
###

# TODO validate input
function vov_create_site {

	SITE_NAME="$1"
	SITE_DOMAIN="$1.wordpress.dev"

	echo_w "Running vv..."

	externals/vv/vv create --name "$SITE_NAME" --domain "$SITE_DOMAIN" --debug

	echo_w "vv finished."
}


###
### main
###

echo
echo_y "                                _    ______ _    __"
echo_y "                               | |  / / __ \ |  / /"
echo_y "                               | | / / / / / | / / "
echo_y "                               | |/ / /_/ /| |/ /  "
echo_y "                               |___/\____/ |___/   "
echo
echo_y "                                                    ...just VOV!"
echo

# parse input and execute the right action

# TODO print help on invalid input

IN_ACTION="$1"

case "$IN_ACTION" in
    init)
		shift
		vov_init
		;;
		
	site)
		shift
		IN_SITE_ACTION="$1"
		IN_SITE_NAME="$2"
		case "$IN_SITE_ACTION" in
			create)
				vov_create_site "$IN_SITE_NAME"
				;;
			delete)
				;;
			*)
				echo_w "Unknown site action. Specify 'create' or 'delete'."
				;;
		esac
		;;
	*)
		echo_w "Unknown action. Specify 'init' or 'site'."
		;;
esac

