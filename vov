#!/bin/bash

# Suffix "-dev" means that this is development version *following* the given version number.
# Among other reason, this is because sort -V doesn't work well with string suffixes and 0.1-dev
# will be considered greater version than just 0.1.
VOV_VERSION='0.2'


###
### terminal output formatting
###
COLOUR_BTW='\033[90m'
COLOUR_WHITE='\033[01;37m'
COLOUR_YELLOW='\033[01;33m'
COLOUR_RESTORE='\033[0m'
COLOUR_RED='\033[91m'
COLOUR_LIGHT_GRAY='\033[0;37m'


# ******************************************************************************
#		Universal helper functions
# ******************************************************************************


function echo_w {
    echo -e "$COLOUR_WHITE$1$COLOUR_RESTORE"
}

function echo_y {
    echo -e "$COLOUR_YELLOW$1$COLOUR_RESTORE"
}

function echo_g {
	echo -e "$COLOUR_LIGHT_GRAY$1$COLOUR_RESTORE"
}


function run_sudo {
	if [ "$IS_CYGWIN" == "1" ]; then
		# sudo is not needed in cygwin - we will not print anything
		return
	else
		sudo echo "Superuser privileges granted."
	fi
}


function maybe_sudo {
	if [ "$IS_CYGWIN" == "1" ]; then
		# sudo is not needed in cygwin
		eval "$@"
	else
		sudo "$@"
	fi
}


function run_vv {
	echo_w "Running vv (Variable VVV)..."

	# give them some credit
	if_not_quiet externals/vv/vv --about

	# run the actual command
	externals/vv/vv "$@"
	
	echo
}


function array_contains() {
    local n=$#
    local value=${!n}
    for ((i=1;i < $#;i++)) {
        if [ "${!i}" == "${value}" ]; then
            echo "y"
            return 0
        fi
    }
    echo "n"
    return 1
}



# ******************************************************************************
#		User input
# ******************************************************************************


# Ask user a yes/no question and insist on an answer.
#
# Return the result: 1 for yes, 0 for no.
#
# Arguments:
# 	1. Question text
#   2. Default result (when user just presses Enter): 0|1
#	3. Variable name for return value
function yes_no_question {
	
	local QUESTION_TEXT="$1"
	local DEFAULT_RESULT="$2"
	local RETURN_VARIABLE="$3"
	
	while true; do
		read -p "$QUESTION_TEXT " yn
		case $yn in
			[Yy]* ) 
				local RESULT="1"
				break
				;;
			[Nn]* ) 
				local RESULT="0" 
				break
				;;
			"" )
				local RESULT="$DEFAULT_RESULT"
				break
				;;
			* ) 
				echo "Please answer yes or no."
				;;
		esac
	done
	
	eval $RETURN_VARIABLE="'$RESULT'"
}


# Ask user for credentials.
#
# Allows to skip answering on empty input.
#
# Arguments:
#	1. Question text.
#	2. Additional description.
#	3. Return variable that will be set to 1 when user provides input
#      and to 0 otherwise.
#	4. Return variable for username
#	5. Return variable for password
function prompt_for_credentials {

	local QUESTION_TEXT="$1"
	local DESCRIPTION_TEXT="$2"
	local RET_RESULT="$3"
	local RET_USERNAME="$4"
	local RET_PASSWORD="$5"

	echo_w "$QUESTION_TEXT"
	echo -e "$DESCRIPTION_TEXT"
	echo

	read -p "User name: " PFC_IN_USERNAME

	if [ -z "$PFC_IN_USERNAME" ]; then
		eval $RET_RESULT=0
		return 0
	else
		eval $RET_RESULT=1
		eval $RET_USERNAME="\"$PFC_IN_USERNAME\""
	fi

	local PASSWORD_FIRST=""
	local PASSWORD_SECOND=""
	local PASSWORDS_MATCH=0

	until [ $PASSWORDS_MATCH == 1 ]; do
		read -s -p "Password: " PASSWORD_FIRST; echo
		read -s -p "Repeat password: " PASSWORD_SECOND; echo

		echo
		
		if [ "$PASSWORD_FIRST" == "$PASSWORD_SECOND" ]; then
			PASSWORDS_MATCH=1
		else
			echo "Passwords don't match. Please repeat."
		fi
	done

	eval $RET_PASSWORD="\"$PASSWORD_FIRST\"" 
}


# ******************************************************************************
#		vov key
# ******************************************************************************


function vov_key {
	
	local KEY_FILE="$VOV_PATH/config/ssh/icl_rsa";
	
	# check if keys already exist
	if [ -f "$KEY_FILE" ]; then
		yes_no_question "The key file already exists. Are you sure you want to generate a new key? [y/N]" 0 CERT_IS_OVERWRITE
		if [ $CERT_IS_OVERWRITE == 0 ]; then
			return
		fi
	fi
	
	
	echo_w "Generating SSH keys..."
	
	local EMAILS_MATCH=0
	
	until [ $EMAILS_MATCH == 1 ]; do
		read -p "Please enter your e-mail address at icanlocalize.com: " CERT_IN_NAME;
		read -p "Please enter your e-mail address again: " CERT_IN_NAME_2;
	
		echo
		
		if [ "$CERT_IN_NAME" == "$CERT_IN_NAME_2" ]; then
			EMAILS_MATCH=1
		else
			echo "E-mail addresses don't match. Please repeat."
		fi
	done
	
	ssh-keygen -t rsa -b 4096 -C "$CERT_IN_NAME" -f "$KEY_FILE"
	
	echo
	echo_w "Keys generated to $KEY_FILE."
	echo_y "Now you need to add the SSH key to Gitlab. Please go to "
	echo_y "https://git.onthegosystems.com/profile/keys and add this key:"
	echo
	cat "$KEY_FILE.pub"
	echo
}


# ******************************************************************************
#		vov init
# ******************************************************************************


function fix_permissions {
	EXECUTABLE_FILES=(
		config/homebin/*
		config/vvv-init-after-each.sh
		database/import-sql.sh
		provision/*
	)

	for FILE in "${EXECUTABLE_FILES[@]}"; do
		chmod +x "$FILE"
	done
}



# urlencode for git credentials
# http://stackoverflow.com/a/10660730
function rawurlencode {
  local string="${1}"
  local strlen=${#string}
  local encoded=""

  for (( pos=0 ; pos<strlen ; pos++ )); do
     c=${string:$pos:1}
     case "$c" in
        [-_.~a-zA-Z0-9] ) o="${c}" ;;
        * )               printf -v o '%%%02x' "'$c"
     esac
     encoded+="${o}"
  done
  echo "${encoded}"
}


###
### vov init
###

function vov_init {

	# constants
	CONFIG_HEADER='#\n# This is a generated file for custom modification of Vagrant options.\n# Do not change it manually, use the Customfile instead.\n#\n'
	CONFIG_32BIT_BOX='config.vm.box = "ubuntu/trusty32"\n'
	CONFIG_LOWMEM_BOX='config.vm.provider :virtualbox do |v|\n    v.customize ["modifyvm", :id, "--memory", 384]\nend\n'
	CONFIG_TWO_CPUS='config.vm.provider :virtualbox do |v|\n    v.customize ["modifyvm", :id, "--cpus", 2]\nend\n'
	GITLAB_CREDENTIALS_FILE="config/checkout-credentials/git_onthegosystems_com"
    
	# user input
	yes_no_question "Create symlink to this vov script? (strongly recommended) [Y/n]" 1 IN_INSTALL_LINK
	yes_no_question "Do you want to use a 32bit box instead of 64bit? [y/N]" 0 IN_32BIT_BOX

	if [ "$IS_32BIT_HOST" == "1" ]; then
		if [ "$IN_32BIT_BOX" == 0 ]; then
			yes_no_question "It seems that you are on a 32bit machine. Switch to 32bit box? [Y/n]" 1 IN_32BIT_BOX
		fi
	fi
	
	yes_no_question "Activate low-memory mode for the box? [y/N]" 0 IN_LOWMEM_BOX
	yes_no_question "Install Vagrant plugins recommended by VVV? [Y/n]" 1 IN_VAGRANT_PLUGINS
	yes_no_question "Should the box have two CPU cores instead of one? [y/N]" 0 IN_TWO_CPUS

	prompt_for_credentials "Please enter GIT credentials for git.onthegosystems.com:" "Press only Enter to skip this step." IN_IS_GIT IN_GITLAB_USERNAME IN_GITLAB_PASSWORD
	
	yes_no_question "Generate a new SSL key for GitLab? (you can use 'vov key' command later) [y/N]" 0 IN_GENERATE_SSL_KEY
		
	yes_no_question "Ready to apply the customisations. Continue? [Y/n]" 1 IN_CONTINUE
	echo

	# exit if user doesn't want to continue
	if [ "$IN_CONTINUE" == "0" ];
	then
		exit
	fi

	# run vov install-link
	if [ "$IN_INSTALL_LINK" = "1" ]; then
		vov_install_link
	fi
	
	# install vagrant plugins
	if [ "$IN_VAGRANT_PLUGINS" == "1" ];
	then
		echo_w "Attempting to install Vagrant plugins..."
    
		vagrant plugin install vagrant-hostsupdater
		vagrant plugin install vagrant-triggers

	fi
	
	# write Gitlab credentials
	if [ $IN_IS_GIT == 1 ]; then
		echo_w "Saving GIT credentials for git.onthegosystems.com..."
		IN_GITLAB_USERNAME=$( rawurlencode "$IN_GITLAB_USERNAME" )
		IN_GITLAB_PASSWORD=$( rawurlencode "$IN_GITLAB_PASSWORD" )
		echo -e "$IN_GITLAB_USERNAME\n$IN_GITLAB_PASSWORD" > $GITLAB_CREDENTIALS_FILE
	fi
	
	# generate the VOVfile
	echo_w "Writing to VOVfile..."
	
	echo -e "$CONFIG_HEADER" > VOVfile

	if [ "$IN_32BIT_BOX" == "1" ];
	then
		echo -e "$CONFIG_32BIT_BOX" >> VOVfile
	fi
	
	if [ "$IN_LOWMEM_BOX" == "1" ];
	then
		echo -e "$CONFIG_LOWMEM_BOX" >> VOVfile
	fi

	if [ "$IN_TWO_CPUS" == "1" ];
	then
		echo -e "$CONFIG_TWO_CPUS" >> VOVfile
	fi

	# fix permissions for scripts
	echo_w "Fixing permissions for executable files..."
	fix_permissions

	if [ "$IN_GENERATE_SSL_KEY" == "1" ];
	then
		echo_w "Running vov key..."
		vov key
	fi

	echo_w "Finished."
	echo
	echo_w "Now you are ready to run VOV with command:$COLOUR_YELLOW ./vov up"
	echo
}


# ******************************************************************************
#		vov install-link
# ******************************************************************************


###
### vov install-link
###

function vov_install_link {

	run_sudo

	# Confirmed that this works on linux and Cygwin 
	local VOV_LINK="/usr/local/bin/vov"
	
	echo_w "Generating symlink to vov in $VOV_LINK..."

	if [ -e "$VOV_LINK" ]; then
		yes_no_question "The file $VOV_LINK already exists. Overwrite? [y/N]" 0 IN_CONTINUE
		if [ "$IN_CONTINUE" == "1" ]; then
			maybe_sudo rm "$VOV_LINK"
		else
			echo_w "Aborted."
			return
		fi
	fi
	
	maybe_sudo ln -s "$VOV_PATH/vov" "$VOV_LINK"
	echo_w "Done."
}


# ******************************************************************************
#		vov conf
# ******************************************************************************


# Use this to set the new config value, needs 3 parameters: key, value, config file path 
# http://stackoverflow.com/questions/2464760/modify-config-file-using-bash-script
function set_config {
    #sed -i "s/^\($1\s*=\s*\).*\$/\1$2/" $3
    local KEY="$1"
    local DELIMITER="="
    local FILE="$3"
    local NEWVALUE="$2"

    #cat "$FILE" | grep "^${KEY}${DELIMITER}" | cut -f2- -d"$DELIMITER"
    mv "$FILE" "$FILE.bak"
	cat "$FILE.bak" | grep -v "^${KEY}${DELIMITER}" > "$FILE"
	echo "${KEY}${DELIMITER}${NEWVALUE}" >> "$FILE"

}


function set_config_flag {
	local key="$1"
	local value="$2"
	local config_file="$3"
	if [[ $value == 1 || $value == 0 ]]; then
		set_config "$key" "$value" "$config_file"
		echo_w "Setting applied."
	else
		echo_w "Invalid value. Only 0 or 1 is allowed."
	fi
}


function vov_conf {
	
	local PROVISIONING_CONFIG_FILE="$VOV_PATH/provision/config"
	local SETTING_NAME="$1"
	shift

	case $SETTING_NAME in

		skip-trunk-site-provisioning)
			set_config_flag "skip-trunk-site-provisioning" "$1" "$PROVISIONING_CONFIG_FILE"
			;;

		skip-develop-site-provisioning)
			set_config_flag "skip-develop-site-provisioning" "$1" "$PROVISIONING_CONFIG_FILE"
			;;

		*)
			echo_w "Unknown setting name '$SETTING_NAME'. Please view VOV project wiki for help."
			;;
	esac

}


# ******************************************************************************
#		vov repo
# ******************************************************************************

# Handler for the vov repo update command
#
# Usage: vov repo update [OPTIONS] [SITE_NAME]
#
# Options:
#
# --all
#         Process the whole /srv/www directory.
#
# --has-root-repository
#         Indicate that a single site has a repository in it's root. This repository
#         will be updated as well but it's subdirectories will be processed, too.
#
# --verbose
#         Turn on verbose mode for the underlying repository_update script.
#
# --git-branch <branch-name>
#         In each git repository where git pull doesn't fail, an attempt to checkout 
#         given branch will happen.
#
function vov_repo_update {
	
	# read input arguments
	local IS_ALL_SITES=0
	local SITE_NAME="wordpress-default"
	local HAS_ROOT_REPOSITORY=0
	local IS_VERBOSE_MODE=0
	local GIT_CHECKOUT_BRANCH=""
	local NO_PULL=0
	local NO_COMPOSER=0

	while [ ! -z "$1" ]; do
		local input_arg="$1"
		shift

		case $input_arg in
			--has-root-repository)
				HAS_ROOT_REPOSITORY=1
				;;
			--all)
				IS_ALL_SITES=1
				;;
			--verbose)
				IS_VERBOSE_MODE=1
				;;
			--git-branch)
				GIT_CHECKOUT_BRANCH="$1"
				shift
				;;
			--no-pull)
				NO_PULL=1
				;;
			--no-composer)
				NO_COMPOSER=1
				;;
			*)
				SITE_NAME="$input_arg"
				;;
		esac
	done

	# we know that some predefined sites have a repository in their root
	local SITES_WITH_ROOT_REPOSITORY=("wordpress-develop" "wordpress-trunk")
	if [ $(array_contains "${SITES_WITH_ROOT_REPOSITORY[@]}" "$SITE_NAME") == "y" ]; then
		HAS_ROOT_REPOSITORY=1
	fi

	# build additional argument for the update command
	local UPDATE_ARGS=""

	if [[ $IS_VERBOSE_MODE == 1 ]]; then
		UPDATE_ARGS="$UPDATE_ARGS --verbose"
	fi
	
	if [[ $NO_PULL == 1 ]]; then
		UPDATE_ARGS="$UPDATE_ARGS --no-pull"
	fi
	
	if [[ $NO_COMPOSER == 1 ]]; then
		UPDATE_ARGS="$UPDATE_ARGS --no-composer"
	fi

	# Determine path that should be updated.
	
	# If no site name was given, it will default to "wordpress-default".
	local UPDATE_PATH="/srv/www/$SITE_NAME"
	if [[ $IS_ALL_SITES == 1 ]]; then
		# We will update everything in the /srv/www directory
		UPDATE_PATH="/srv/www"
	elif [[ $SITE_NAME == "wordpress-develop" ]]; then
		# Fix path for wordpress-develop, we know other subdirs will not contain anything updateable
		UPDATE_PATH="/srv/www/wordpress-develop/src"
	fi
	
	if [ ! -z "$GIT_CHECKOUT_BRANCH" ]; then
		UPDATE_ARGS="$UPDATE_ARGS --git-branch \"$GIT_CHECKOUT_BRANCH\""
	fi

	local UPDATE_COMMAND="repository_update $UPDATE_ARGS $UPDATE_PATH"

	# If there's a repository in the root of the update path, we will run the update command first normally
	# and second with --only-subdirs. That way everything gets updated.
	if [[ $HAS_ROOT_REPOSITORY == 1 ]]; then
		UPDATE_COMMAND="repository_update $UPDATE_ARGS $UPDATE_PATH; repository_update --only-subdirs $UPDATE_ARGS $UPDATE_PATH"
	fi
	
	./vov -q run "$UPDATE_COMMAND"
}


# Handler for the vov repo command
#
#
function vov_repo {

	local ACTION="$1"
	shift

	case $ACTION in
		update)
			vov_repo_update "$@"
			;;
		*)
			echo_w "Unknown repo action."
			;;
	esac

}



# ******************************************************************************
#		vov site
# ******************************************************************************


###
### vov create site
###

function vov_create_site {

	# Determine site name and domain
	#
	#
	SITE_NAME=$1
	shift
	SITE_DOMAIN="$SITE_NAME.wordpress.dev"

	# Very basic input validation
	SITE_CHECK=$( rawurlencode "$SITE_NAME" )
	if [ "$SITE_NAME" != "$SITE_CHECK" ]; then
		echo_w "'$SITE_NAME' is not a valid site name."
		return
	fi

	SITE_ARGS="--name $SITE_NAME --domain $SITE_DOMAIN --debug"

	# Default options
	#
	#
	IS_BUNDLE_SITE=0 # If 1, this is a site with a bundle checkout
	BUNDLE_VERSION=0
	IS_CLEAR_SITE=0 # If 1, no vov_checkout will be performed on the site
	
	# Parse additional commandline parameters
	#
	#
	OPTIND=1
	while [ ! -z "$1" ]; do
		case "$1" in
			--bundle)
				IS_BUNDLE_SITE=1
				BUNDLE_NAME="$2"
				BUNDLE_VERSION="$3"
				shift 3
				;;
			--clear)
				IS_CLEAR_SITE=1
				shift
				;;
			*)
				shift
				;;
		esac
	done

	# Build arguments for vv
	#
	#
	BUNDLE_ARGS=""
	if [ $IS_BUNDLE_SITE == 1 ]; then
		BUNDLE_ARGS="--bundle \"$BUNDLE_NAME\" \"$BUNDLE_VERSION\""
	fi

	CLEAR_ARGS=""
	if [ $IS_CLEAR_SITE == 1 ]; then
		CLEAR_ARGS="--vov-omit-checkout"
	fi

	# Run the VV utility
	#
	#

	run_sudo
	
	echo_w "Running vv..."
	externals/vv/vv create $SITE_ARGS $BUNDLE_ARGS $CLEAR_ARGS
	echo_w "vv finished."
}


###
### vov site remove
###

function vov_remove_site {
	IN_SITE_NAME=$1
	shift

	run_sudo

	# Run the VV utility
	echo_w "Running vv..."
	externals/vv/vv remove --name $IN_SITE_NAME
	echo_w "vv finished."
}


function vov_clear_site {
	local site=$1
	shift

	run_sudo

	echo_w "Clearing site $IN_SITE_NAME, please be patient..."
	
	local cmd="cd \"/srv/www/$site\""
	cmd="$cmd; wp db reset --yes"
	cmd="$cmd; wp core install --title=\"$site\" --url=\"http://$site.wordpress.dev\" --admin_user=\"admin\" --admin_password=\"password\" --admin_email=\"admin@localhost.dev\""
	cmd="$cmd; wp plugin activate --all;"
	
	./vov -q run "$cmd"
}


# ******************************************************************************
#		Helper functions for main
# ******************************************************************************


is_update_available () {
	local THIS_VERSION=$1
	local REPO_VERSION=$2

	case $VOV_OS in
		osx)
			# http://stackoverflow.com/questions/4493205/unix-sort-of-version-numbers
			local LATEST_VERSION=$(echo -e "$THIS_VERSION\n$REPO_VERSION" | sort -t. -k 1,1n -k 2,2n -k 3,3n -k 4,4n | tail -n 1)
			;;
		*)
			local LATEST_VERSION=$(echo -e "$THIS_VERSION\n$REPO_VERSION" | sort -V | tail -n 1)
			;;
	esac
	
	if [ "$LATEST_VERSION" = "$THIS_VERSION" ]; then
		echo 0
	else
		echo 1
	fi
}


function check_updates {
	local CURRENT_BRANCH=`git rev-parse --abbrev-ref HEAD`

	if_not_quiet echo_g "You are on the $CURRENT_BRANCH branch."
	
	local LAST_TAG=`git describe --abbrev=0 --tags`	
	local UPDATE_EXISTS=$(is_update_available $VOV_VERSION $LAST_TAG)
	if [ "$UPDATE_EXISTS" = 1 ]; then
		if_not_quiet echo_y "There is a new version of VOV available: $LAST_TAG"
	fi
}


# because apple is evil
# http://stackoverflow.com/questions/1055671/how-can-i-get-the-behavior-of-gnus-readlink-f-on-a-mac
function readlink_f {
	case $VOV_OS in
	
		osx)
			TARGET_FILE=$1

			cd `dirname $TARGET_FILE`
			TARGET_FILE=`basename $TARGET_FILE`

			# Iterate down a (possible) chain of symlinks
			while [ -L "$TARGET_FILE" ]
			do
				TARGET_FILE=`readlink $TARGET_FILE`
				cd `dirname $TARGET_FILE`
				TARGET_FILE=`basename $TARGET_FILE`
			done

			# Compute the canonicalized name by finding the physical path 
			# for the directory we're in and appending the target file.
			PHYS_DIR=`pwd -P`
			RESULT=$PHYS_DIR/$TARGET_FILE
			echo $RESULT			
			;;
			
		*)
			readlink -f "$1"
			;;
	esac
}


function if_not_quiet {
	if [[ $IS_QUIET_MODE == 0 ]]; then
		local command="$1";
		shift
		local args="$@"
		$command "$args"
	fi
}


# ******************************************************************************
#		MAIN
# ******************************************************************************



if [[ $1 == "-q" ]]; then
	# quiet mode
	IS_QUIET_MODE=1
	shift
else
	IS_QUIET_MODE=0
fi


if_not_quiet echo
if_not_quiet echo_y "                                _    ______ _    __"
if_not_quiet echo_y "                               | |  / / __ \ |  / /"
if_not_quiet echo_y "                               | | / / / / / | / / "
if_not_quiet echo_y "                               | |/ / /_/ /| |/ /  "
if_not_quiet echo_y "                               |___/\____/ |___/   "
if_not_quiet echo
if_not_quiet echo_y "                                                    ...just VOV!"
if_not_quiet echo


# Probe environment
#
# Detect Cygwin, determine machine hardware etc.

# cygwin or not, that's the question
IS_CYGWIN=0
IS_LINUX=0
IS_OSX=0
VOV_OS="unknown"

case `uname` in
	
	Linux)
		if_not_quiet echo_g "Linux, yaaay!"
		IS_LINUX=1
		VOV_OS="linux"
		;;
	darwin|Darwin)
		if_not_quiet echo_g "OS X. Please help me with testing your platform."
		IS_OSX=1
		VOV_OS="osx"
		;;
	*)
		# Let's try uname -o. It might not be supported, but we have nothing to lose.
		if [ `uname -o` == "Cygwin" ]; then
			if_not_quiet echo_g "Cygwin detected. Welcome, Windows user!"
			IS_CYGWIN=1
			VOV_OS="cygwin"
		else
			if_not_quiet echo_g "Your platform might not be fully supported (OSTYPE=$OSTYPE)."
		fi
		;;
esac


# machine name
MACHINE_HW_NAME=`uname -m`
if [ "$MACHINE_HW_NAME" == "x86_64" ]; then
	IS_32BIT_HOST=0
else
	if_not_quiet echo_g "This is a 32bit machine."
	IS_32BIT_HOST=1
fi

# determine absolute path to this script
# http://stackoverflow.com/questions/4774054/reliable-way-for-a-bash-script-to-get-the-full-path-to-itself
# http://unix.stackexchange.com/questions/17499/get-path-of-current-script-when-executed-through-a-symlink
VOV_PATH="$(dirname "$(readlink_f "$0")")"
if_not_quiet echo_g "VOV_PATH is $VOV_PATH"

# everything must happen in the VOV project path
cd "$VOV_PATH"

# check for VOV updates
check_updates

# parse input and execute the right action
#
# 

IN_ACTION="$1"
shift

if_not_quiet echo

case "$IN_ACTION" in


	# Site initialization
	#
	#
	
    init)
		vov_init
		;;


	# additional configuration
	#
	#
	conf)
		vov_conf "$@"
		;;

	# vagrant commands: up, suspend, halt, destroy, provision, ssh
	#
	# run vagrant commands but invoke sudo first
	# so the user can enter their password immediately and is not
	# bothered by vagrant-hostsupdater anymore
	
	up)
		run_sudo
		vagrant up "$@"
		;;

	suspend)
		run_sudo
		vagrant suspend "$@"
		;;

	halt)
		run_sudo
		vagrant halt "$@"
		;;

	destroy)
		run_sudo
		vagrant destroy "$@"
		;;

	provision)
		vagrant provision "$@"
		;;

	ssh)
		echo_w "Connecting..."
		vagrant ssh "$@"
		;;

	# Pass any command to Vagrant
	#
	#
	
	v)
		vagrant "$@"
		;;

	# List existing sites
	#
	#

	list)
		run_vv list
		;;

	# Invoke the vv utility and pass rest of the arguments.
	#
	#

	vv)
		run_vv "$@"
		;;

	# Run command inside the box
	#
	#

	run)
		run_command="'source .bash_profile; source .bash_aliases; source .bashrc; $@'"
		echo_w "Running command: $run_command"
		vagrant ssh -- bash -ic $run_command
		;;

	# Batch action with repositories

	repo)
		vov_repo "$@"
		;;
		

	# Perform operation on a site
	#
	#
	
	site)
		IN_SITE_ACTION="$1"
		IN_SITE_NAME="$2"
		shift 2 
		case "$IN_SITE_ACTION" in

			# create a site
			create)

				# rest of the arguments will be passed to vov_create_site
				vov_create_site "$IN_SITE_NAME" "$@"
				;;

			# remove a site
			remove)
				vov_remove_site "$IN_SITE_NAME" "$@" 
				;;

			# clear site's database
			clear)
				vov_clear_site "$IN_SITE_NAME" "$@"
				;;


			*)
				echo_w "Unknown site action. Specify 'create' or 'remove'."
				;;
		esac
		;;


	# Print VOV version
	#
	#
	
	version)
		echo_w "VOV version is $VOV_VERSION".
		echo
		;;


	# Create symlink to this script
	#
	#

	install-link)
		vov_install_link
		;;
		
		
	# Generate SSH keys for git.onthegosystems.com
	#
	#
	
	key)
		vov_key
		;;

	# Unrecognized command
	#
	# Print link to VOV wiki.
	
	*)
		echo_w "Unknown action. Please refer to documentation for this script:"
		echo_y "https://git.onthegosystems.com/misc/vvv-for-otgs/wikis/vov-sh."
		;;
esac

# next time we will know if there is an upgrade available
#if_not_quiet git -c core.askpass=false fetch

# return from VOV_PATH
cd - > /dev/null
